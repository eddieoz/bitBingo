---
description: 
globs: 
alwaysApply: true
---
## Optimized Frontend Development Rules for AI

### 1. Project Setup
- **Node.js v20**: Use Node.js version 20.
- **pnpm**: Use pnpm for package management.

### 2. Code Style
- **TypeScript, React, Create React App (CRA)**: Use TypeScript, React, and structure projects based on Create React App conventions.
- **Tamagui or shadcn/ui**: Use Tamagui for cross-platform or advanced themes, shadcn/ui for web-only (requires CRA customization or alternatives like Craco).
- **Functional Programming**: Prefer functional components and declarative code.
- **No Duplication**: Reuse code; create helper modules.
- **Descriptive Names**: Use clear, descriptive names (e.g., `isLoading`, `hasError`).
- **File Structure**:
    - Export all from each file.
    - Named exports preferred.
    - `kebab-case` directories (e.g., `components/auth-wizard`).

### 3. TypeScript
- **Strict Mode**: `"strict": true` in `tsconfig.json`.
- **Interfaces**: Use interfaces for object types.
- **Zod**: Use Zod for validation.
- **No Enums**: Use literal types or maps instead.
- **`function` keyword**: Prefer `function` declarations.
- **JSX**: Clear, declarative JSX.

### 4. Components
- **Functional Components**: Always use functional components. All components are client-side by default in CRA.
- **PascalCase**: `PascalCase` for component files and names (e.g., `MyComponent.tsx`).
- **Component Location**: `src/components/` or subfolders. Page/View components typically in `src/pages/` or `src/views/`.
- **Small Components**: Keep components small and typed with interfaces.

### 5. Styling
- **Tamagui or shadcn/ui**: Consistent theming with Tamagui or shadcn/ui.
- **Responsive Design**: Mobile-first approach.
- **`cn()` utility**: For conditional classes in web (shadcn/ui).
- **Consistent Styling**: Avoid excessive style overrides.

### 6. State Management
- **Global State**: Zustand (complex) or React Context + useReducer (simple).
- **Data Fetching**: TanStack React Query for server data.
- **Minimize `useEffect`**: Use derived state.
- **Auth Context**: `src/contexts/auth.tsx` for auth state (if using React Context).
- **TanStack React Query**: Always use for server state.

### 7. i18n
- **i18next**: Web translations.
- **expo-localization**: React Native translations (if using Expo alongside CRA).
- **Internationalize All Text**: Translate all user-facing text.
- **Locale Files**: Consistent structure (e.g., `public/locales/en/common.json` or `src/locales/`).

### 8. Routing
- **React Router**: Use `react-router-dom` for client-side routing.
- **Route Configuration**: Define routes typically in a central file (e.g., `src/App.tsx` or `src/routes.tsx`).

### 9. Authentication
- **Supabase**: Use Supabase for backend and auth.
- **Magic Link or Supabase Auth**: Use magic links or Supabase auth. Securely store JWT in localStorage.
- **Protected Routes**: Implement with React Router features (e.g., wrapper components, route checks) or HOCs.
- **Stripe**: Integrate Stripe for subscriptions.

### 10. Error Handling
- **Error Boundaries/`try/catch`**: For error handling.
- **Zod Validation**: Validate inputs with Zod.
- **Early Returns**: For invalid states.
- **Error Logging**: Log errors, show user-friendly messages.
- **Webhook Handling**: Handle webhooks for external services (e.g., Stripe) on a separate backend server.

### 11. Performance
- **Code Splitting**: Use `React.lazy` and `Suspense` for code splitting routes or large components.
- **Loading States**: Show loading states for lazy-loaded code.
- **Image Optimization**: Use standard `<img>` tags or consider image optimization libraries. Manual optimization might be needed.
- **Memoization**: `React.memo`, `useMemo`, `useCallback`.

### 12. Monorepo
- **Turbo**: Use Turborepo for monorepo.
- **App/Package Structure**: `apps/`, `packages/`.
- **Turbo Config**: `turbo.json`, root `package.json`.
- **Generators**: Use `yarn turbo gen`.

### 13. Stripe
- **Stripe**: Use for payments.
- **Customer Portal**: For subscription management.
- **Webhooks**: Handle Stripe webhooks on a separate backend.
- **Sync with Supabase**: Update user subscription status in Supabase via the backend.

### 14. Testing (TDD/BDD)
- **TDD**: Test-First (TDD Cycle: Red-Green-Refactor)
- **BDD**: Behaviont (Given-When-Then).
- **Unit Tests**: React Testing Library (included with CRA) for critical components.
- **Integration/E2E Tests**: For auth flows, user journeys (e.g., using Cypress or Playwright).
- **Frontend Tests**: Focus on user behavior, backend for business logic.
- **TDD/BDD Rules**: use @tests-tdd+bdd.mdc

### 15. Tools
- **Screenshot Tool**: For UI changes, save screenshots in `screenshots/`.
- **Architect Tool**: For planning complex tasks.
- **codeReview Tool**: For code reviews after changes.

### 16. Conventions
- **Short Code, Semantic Commits**: Clear commits (e.g., `feat: add user profile form`).
- **Reusable Logic**: `src/lib/utils/shared.ts` or `src/utils/`.
- **`.tsx` Migrations**: Use `.tsx` for migrations (if applicable, less common in CRA context).
- **Follow Docs**: Use official documentation (React, CRA, Supabase, Tamagui, shadcn/ui).
- **Env Variables**: Use `.env` files as supported by CRA. For platform configs use (`eas.json` if applicable).

### IMPORTANT
- **Frontend Logic**: Frontend only consumes backend outcomes, no business rules.
- **Test Command**: `pnpm test run | cat` (or `pnpm test`) (ignore warnings, fix errors).
- **Build Command**: `pnpm build` (ignore warnings, fix errors).
- **`.cursor-updates`**: Add one-sentence summary to `.cursor-updates` after each change.
- **Git Commit**: `git add . && git commit -m "Your commit message"` (no push).
- Try to fix things at the cause, not the symptom
- Be very detailed with summarization and do not miss out things that are important