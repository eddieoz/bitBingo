---
description: 
globs: backend/**/*,backend/*,backend/**
alwaysApply: false
---
## Backend Development Rules

### Node & Package Manager
1. Always use **Node.js version 20** through nvm: `nvm use 20` or rely on the project’s `.nvmrc`.
2. Always use **pnpm** for all package operations (install, build, run, etc.).

### Components & Naming
1. Use **functional components** with `"use client"` only if truly needed (e.g., a tiny UI piece within the backend folder, although typically backend is server code).
2. Name components in **PascalCase** under `src/components/`.
3. Keep them **small** and typed with **interfaces**.
4. Use **Tailwind** for any UI elements (e.g., textarea, button, etc.). Do **not** use Radix or shadcn/ui for backend UI components.

### Prisma
1. Manage all DB logic with **Prisma** in `prisma/schema.prisma` and `src/lib/db.ts`.
2. Use **snake_case** for table names, but **camelCase** for fields.
3. Avoid raw SQL queries. When schema changes are made, run `pnpm prisma migrate dev`. Do **not** use `pnpm prisma db push`.

### Icons
1. Prefer **lucide-react** for icons, named in **PascalCase**.
2. Place custom icons in `src/components/icons/`.

### Toast Notifications
1. Use **react-toastify** in **client components** for notifications (if the backend includes any client-facing parts).
2. Use `toast.success()`, `toast.error()`, etc., for user feedback.

### Next.js Structure
1. Use **App Router** in `app/`, relying on **server components** by default. Use `"use client"` for client logic in the backend folder only as needed.
2. **NextAuth + Prisma** for authentication, storing secrets in `.env`.
3. Store **backend** components under `backend/` and **frontend** components under `frontend/`.

### Rest API Routers
1. Place routers under `src/lib/api/routers` and compose them in `src/lib/api/root.ts`.
2. Use `publicProcedure` or `protectedProcedure` with **Zod** for validation.
3. Access these routes from React via `@/lib/rest/react` (or as needed).

### TypeScript & Syntax
1. Enable **strict mode** and avoid `any`.
2. Use **optional chaining**, **union types**, and **no enums**.
3. Keep code typed and well-documented for clarity.

### File & Folder Names
1. Follow **kebab-case** for Next.js routes (e.g., `app/dashboard/page.tsx`).
2. Store shared types in `src/lib/types.ts`.
3. **Sort imports**: external → internal → sibling → styles.

### Tailwind Usage
1. Use **Tailwind** (mobile-first). Support dark mode with `dark:(class)`.
2. Extend brand tokens in `tailwind.config.ts`.
3. For animations or transitions, prefer **Framer Motion**.

### Inngest / Background Jobs
1. Configure Inngest in `inngest.config.ts`.
2. Use `src/app/api/inngest/route.ts` for the Inngest API route.
3. Do **not** rely on TRPC success responses for background tasks; use **polling** to update the UI based on Inngest events.

### AI
1. Use `generateChatCompletion` in `src/lib/aiClient.ts` for **all AI calls**.
2. Prefer the `claude-3.7-sonnet` model with **high reasoning effort** for every AI interaction.

### Testing (TDD/BDD)
1. **TDD**: Test-First (TDD Cycle: Red-Green-Refactor)
2. **BDD**: Behavior-Driven Development (Given-When-Then).
3. **Unit Tests**: React Testing Library for critical components.
4. **Integration/E2E Tests**: For auth flows, user journeys.
5. **Backend Tests**: Focus on user behavior, backend for business logic.
6. **TDD/BDD Rules**: use @tests-tdd+bdd.mdc
3. Keep business logic in the **backend**; the frontend simply consumes these endpoints.

### Tools
1. For **UI changes**, use the `screenshot` tool to capture results and store them in the `screenshots/` folder.
2. For a **complex task**, locate relevant files and call the `architect` tool for a plan. Display that plan to the user, then follow it while maintaining existing patterns.
3. After a complex task is completed, use the `codeReview` tool to create a diff and perform a thorough code review before finalizing.

### Additional
1. Keep code **short** and use **semantic commits**.
2. Place **reusable logic** in `src/lib/utils/shared.ts` or `src/lib/utils/server.ts`.
3. For migrations or scripts, use **TSX** scripts (TypeScript with .tsx extension).
4. Document **complex logic** with inline comments.

---

### IMPORTANT

- After implementing changes, **always build** with `pnpm build`. **Ignore warnings**, fix errors.
- **Always add a one-sentence summary** of changes to **`.cursor-updates`** (in Markdown format) at the end of every agent interaction.
- If you forget, the user can type `"finish"`, at which point you will run the build and update `.cursor-updates`.
- Finally, update Git:
  ```bash
  git add .
  git commit -m "Your commit message"
  ```
  **Do not push**.

